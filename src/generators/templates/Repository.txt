using ##PROJECTNAME##.Data;
using ##PROJECTNAME##.Models;
using ##PROJECTNAME##.Models.Dtos;

namespace ##PROJECTNAME##;

public class ##ENTITY_NAME##Repository
{

  private ##DBCONTEXT_NAME## _dbContext;

  public ##ENTITY_NAME##Repository(##DBCONTEXT_NAME## dbContext)
  {
    _dbContext = dbContext;
  }

  public async Task<##ENTITY_NAME##> Create(##ENTITY_NAME##Dto dto)
  {
    ##ENTITY_NAME## entity = new ##ENTITY_NAME##()
    {
##FIELDS##
    };

    _dbContext.##ENTITY_NAME_PLURAL##.Add(entity);
    await _dbContext.SaveChangesAsync();

    return entity;
  }

  public async Task<##ENTITY_NAME##> Update(##ENTITY_NAME##Dto dto, int id)
  {
    var dbEntity = _dbContext.##ENTITY_NAME_PLURAL##.SingleOrDefault(x => x.Id == id);
    if (dbEntity == null)
    {
      throw new Exception($"No ##ENTITY_NAME## found with ID {id}");
    }
    
    dbEntity.UpdatedAt = DateTime.Now;
##UPDATE_FIELDS##

    _dbContext.##ENTITY_NAME_PLURAL##.Update(dbEntity);
    await _dbContext.SaveChangesAsync();

    return dbEntity;
  }

  public async Task Delete(int id)
  {
    var p = _dbContext.##ENTITY_NAME_PLURAL##.SingleOrDefault(x => x.Id == id);
    if (p == null)
    {
      throw new Exception($"No ##ENTITY_NAME## found with ID {id}");
    }

    _dbContext.##ENTITY_NAME_PLURAL##.Remove(p);
    await _dbContext.SaveChangesAsync();
  }

}
